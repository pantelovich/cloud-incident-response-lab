name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: ${{ steps.plan.outputs.stdout }}
      run: |
        const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
        #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

        <details><summary>Show Plan</summary>

        \`\`\`terraform
        ${process.env.PLAN}
        \`\`\`

        </details>

        *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

        github.rest.issues.createComment({
          issue_number: context.issue.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: output
        })

  lambda:
    name: Lambda Function
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./lambda

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test Lambda function
      run: |
        python -c "
        import handler
        import json
        
        # Test with sample event
        with open('../tests/sample-guardduty-event.json', 'r') as f:
            event = json.load(f)
        
        # Mock environment variable
        import os
        os.environ['SNS_TOPIC_ARN'] = 'arn:aws:sns:us-east-1:123456789012:test-topic'
        
        # Test function (will fail on AWS calls but should not crash)
        try:
            result = handler.lambda_handler(event, {})
            print('Lambda function test passed')
        except Exception as e:
            if 'NoCredentialsError' in str(e) or 'botocore.exceptions.NoCredentialsError' in str(e):
                print('Lambda function test passed (expected AWS credentials error)')
            else:
                raise e
        "